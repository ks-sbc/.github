name: Publish Approved Documents

on:
  pull_request:
    types: [closed]

permissions:
  contents: write # Needed for pushing to gh-pages and creating tags

jobs:
  publish_approved_documents:
    name: Publish L0 Documents
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main' && # TODO: Adjust 'main' if your L0 source/base branch for PRs is different
      contains(github.event.pull_request.labels.*.name, 'status:approved-for-publication') # TODO: Adjust label name if different, e.g., 'L0:publish'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (source branch)
        uses: actions/checkout@v4
        with:
          # Checks out the target branch of the PR (e.g., 'main') which should contain the merged changes.
          ref: ${{ github.event.pull_request.base.ref }} 
          fetch-depth: 0 # Required for tagging and getting commit history if needed.

      - name: Publish to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # publish_dir: Specifies the directory from the source branch (e.g., 'main') to be published.
          # Ensure this path correctly points to your L0 content that is ready for public viewing.
          publish_dir: ./content/L0_public # TODO: Adjust path to your L0 publishable content directory.
                                           # For example, if your L0 docs are in the root of the 'main' branch, use './'
                                           # If they are in a 'docs' folder, use './docs'
          publish_branch: gh-pages # The branch to publish to. GitHub Pages often uses this by default.
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: "Automated publication of L0 documents from PR #${{ github.event.pull_request.number }} [skip ci]"
          # force_orphan: true # Optional: Creates a clean history on the publish_branch by starting fresh each time.
                               # Be cautious if you have other content on gh-pages not managed by this action.
          # keep_files: false  # Optional: Set to 'true' if you want to keep files on publish_branch that are not in publish_dir.
                               # Default is 'false', meaning old files are removed.
          # cname: your.domain.com # Optional: If using a custom domain for GitHub Pages.

      - name: Create release tag
        id: tag_step # Added id
        # This step runs if the gh-pages publish was successful.
        # It tags the merge commit of the PR on the base branch (e.g., 'main').
        if: success() 
        run: |
          timestamp=$(date -u +"%Y%m%d%H%M%S")
          merge_commit_sha="${{ github.event.pull_request.merge_commit_sha }}"
          
          if [ -z "$merge_commit_sha" ] || [ "$merge_commit_sha" == "null" ]; then
            echo "Error: Merge commit SHA is not available. This might happen if the PR was squash merged or rebase merged in a way that doesn't directly provide it, or if the event data is incomplete. Cannot create tag."
            echo "Attempting to use HEAD of base branch for tagging as a fallback."
            merge_commit_sha=$(git rev-parse HEAD) 
            if [ -z "$merge_commit_sha" ]; then
                echo "Error: Could not determine commit SHA for tagging. Skipping tag creation."
                exit 1 # Exit to prevent Slack notification claiming success with a tag
            fi
            echo "Using fallback commit SHA: $merge_commit_sha"
          fi

          tag_name="pub/L0/pr${{ github.event.pull_request.number }}-${timestamp}"
          
          echo "Creating tag: $tag_name for commit $merge_commit_sha"
          git tag $tag_name $merge_commit_sha
          
          echo "Pushing tag $tag_name to origin..."
          git push origin $tag_name
          
          echo "Tag $tag_name pushed successfully."
          echo "tag_name_out=$tag_name" >> $GITHUB_OUTPUT # Output tag name

      - name: Send Slack Notification on Success
        if: success()
        uses: rtCamp/action-slack-notify@v2.4.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "Publication Bot"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "good"
          # TODO: Adjust the link to your GitHub Pages site if it's not the standard github.io/repo-name structure
          SLACK_MESSAGE: "Documents successfully published from PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}>. New tag: `${{ steps.tag_step.outputs.tag_name_out }}`. View at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"

      - name: Send Slack Notification on Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2.4.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "Publication Bot"
          SLACK_ICON_EMOJI: ":x:"
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "FAILED to publish documents from PR <${{ github.event.pull_request.html_url }}|#${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}>. Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
